var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
    }
}
GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedauto";
GameConfig.screenMode = "vertical";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
// import YKs = require("YK");
require("./YKFarmework/ResMgr/ResMgr");
require("./YKFarmework/Net/NetMgr");
require("./YKFarmework/EventMgr/DispatchEventNode");
require("./YKFarmework/EventMgr/EventListenerMgr");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        fairygui.UIConfig.packageFileExtension = "bin";
        fairygui.UIConfig.bringWindowToFrontOnClick = false;
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
        this.initGame();
    }
    initGame() {
        fairygui.UIConfig.globalModalWaiting = "ui://Loading/waitWind";
        YK.NetMgr.Instance.AddProto("netpack", netpack.ProtocolDef.ProtocolNames);
        YK.ModeMgr.Instance.AddMode(RoleMode);
        YK.ModeMgr.Instance.InitData();
        YK.SceneMgr.Instance.GoToScene(LoadingScene);
    }
}
//激活启动类
new Main();
},{"./GameConfig":1,"./YKFarmework/EventMgr/DispatchEventNode":3,"./YKFarmework/EventMgr/EventListenerMgr":4,"./YKFarmework/Net/NetMgr":5,"./YKFarmework/ResMgr/ResMgr":6}],3:[function(require,module,exports){
var YK;
(function (YK) {
    class DispatchEventNode {
        constructor() {
            this.eventDataPools = new Array();
            this.eventDic = {};
        }
        createEventData(cmd, data) {
            let ev;
            if (this.eventDataPools.length > 0) {
                ev = this.eventDataPools.pop();
                ev.cmd = cmd;
                ev.data = data;
                ev.isSotp = false;
            }
            else {
                ev = new EventData(cmd, data);
            }
            return ev;
        }
        returnEventData(ev) {
            ev.data = null;
            ev.cmd = null;
            ev.isSotp = false;
            this.eventDataPools.push(ev);
        }
        /**
         * 添加一个消息监听器
         * @param type 消息类型
         * @param callBack 回调函数
         * @param target 作用对象
         * @param priority 消息的优先级
         * @param once 是否只监听一次
         */
        addEventListener(type, callBack, target, priority = 0, once = false) {
            type = type.toString();
            let info = {
                callBack: callBack,
                target: target,
                priority: priority,
                once: once
            };
            let array = this.eventDic[type];
            let has = false;
            let pos = 0;
            if (array != null) {
                array.forEach(element => {
                    if (element.target == target && element.callBack == callBack) {
                        has = true;
                    }
                    if (element.priority > info.priority) {
                        pos++;
                    }
                });
            }
            else {
                array = new Array();
                this.eventDic[type] = array;
            }
            if (has) {
                console.error("重复注册消息：type=" + type);
            }
            else {
                array.splice(pos, 0, info);
            }
        }
        /**
         * 移除一个消息监听器
         * @param type 消息id
         * @param callBack 回调函数
         * @param target 作用的对象
         */
        removeEventListener(type, callBack, target) {
            type = type.toString();
            let info = null;
            let array = this.eventDic[type];
            if (array != null) {
                let infoIndex = -1;
                array.every((value, index, array) => {
                    if (value.target == target && value.callBack == callBack) {
                        infoIndex = index;
                        info = value;
                        return false;
                    }
                    return true;
                });
                if (infoIndex != -1) {
                    array.splice(infoIndex, 1);
                }
            }
        }
        /**
         * 是否存在这个监听消息
         * @param type 消息类型
         * @param callBack 回调类型
         * @param target 回调对象
         */
        hasEventListener(type, callBack, target) {
            let flag = false;
            let array = this.eventDic[type];
            if (array) {
                let index = array.findIndex((obj, index, any) => {
                    return obj.target == target && obj.callBack == callBack;
                });
                flag = index != -1;
            }
            return flag;
        }
        /**
         * 派发消息
         * @param ev 派发的消息内容
         */
        DispatchEvent(ev) {
            this._DispatchEvent(ev);
        }
        /**
         * 派发消息
         * @param type 消息id
         * @param data 消息内容
         */
        DispatchEventByType(type, data = null) {
            let ev = this.createEventData(type, data);
            this._DispatchEvent(ev);
            if (ev != null) {
                this.returnEventData(ev);
            }
        }
        _DispatchEvent(ev) {
            let array = this.eventDic[ev.cmd];
            if (array != null) {
                for (let i = 0; i < array.length; i++) {
                    let info = array[i];
                    if (info.callBack != null) {
                        info.callBack.call(info.target, ev);
                    }
                    if (info.once) {
                        array.splice(i--, 1);
                    }
                    if (ev.isSotp) {
                        break;
                    }
                }
            }
        }
    }
    YK.DispatchEventNode = DispatchEventNode;
    class EventData {
        constructor(cmd, obj) {
            this.isSotp = false;
            this.cmd = cmd;
            this.data = obj;
            this.isSotp = false;
        }
        /**
         * Stop
         */
        Stop() {
            this.isSotp = true;
        }
    }
    YK.EventData = EventData;
    class Func {
        constructor(thisObj, callBack) {
            this.mThisObj = thisObj;
            this.mCallBack = callBack;
        }
        Invoke(...args) {
            this.mCallBack.call(this.mThisObj, ...args);
        }
    }
    YK.Func = Func;
})(YK || (YK = {}));
},{}],4:[function(require,module,exports){
var YK;
(function (YK) {
    class EventListenerMgr {
        constructor(dis = null) {
            this.mOwner = null;
            this.mListener = new Array();
            this.mOwner = dis;
        }
        /**
         *
         * @param callback 回调
         * @param thisObj 作用对象
         * @param type 消息类型
         * @param _priority 优先级
         * @param _dispatchOnce 是否只派发一次
         */
        addListener(type, callback, thisObj, _priority = 0, _dispatchOnce = false) {
            if (this.mOwner.hasEventListener(type, callback, thisObj)) {
                console.warn("重复注册消息 消息id" + type);
            }
            else {
                let listener = EventListenerData.CreateEventListenerData(this.mOwner, callback, thisObj, type.toString(), _priority, _dispatchOnce);
                listener.AttachListener();
                this.mListener.push(listener);
            }
        }
        /**
         *
         * @param callback 回调
         * @param thisObj 作用对象
         * @param type 消息类型
         */
        removeListener(callback, thisObj, type) {
            if (this.mOwner.hasEventListener(type, callback, thisObj)) {
                let listener = null;
                let index = this.mListener.findIndex((value, index, array) => {
                    if (value.thisObj == thisObj && value.callback == callback) {
                        listener = value;
                        return true;
                    }
                    return false;
                });
                if (index != -1) {
                    listener.DetachListener();
                    this.mListener.splice(index, 1);
                }
            }
        }
        removeAllListener() {
            this.mListener.forEach(listener => {
                listener.DetachListener();
            });
            this.mListener.splice(0, this.mListener.length);
        }
    }
    YK.EventListenerMgr = EventListenerMgr;
    class InterchangeableEventListenerMgr {
        constructor(thisObj, defCallback = null) {
            this.otherEvents = new Array();
            this.networkEvnets = new EventListenerMgr(YK.NetMgr.Instance);
            this.sceneEvents = new EventListenerMgr(YK.SceneMgr.Instance);
            this.uiEvents = new EventListenerMgr(YK.UIMgr.Instance);
            this.modeEvents = new EventListenerMgr(YK.ModeMgr.Instance);
            this.mDefObj = thisObj;
            this.otherEvents = new Array();
            this.mDefCallback = new EventListenerData(YK.NetMgr.Instance, defCallback, thisObj, null);
            this.mNetCallback = new EventListenerData(YK.NetMgr.Instance, defCallback, thisObj, null);
            this.mModeCallback = new EventListenerData(YK.NetMgr.Instance, defCallback, thisObj, null);
            this.mSceneCallback = new EventListenerData(YK.NetMgr.Instance, defCallback, thisObj, null);
            this.mUICallback = new EventListenerData(YK.NetMgr.Instance, defCallback, thisObj, null);
        }
        setDegCallback(callback, priority = 0) {
            this.mDefCallback.callback = callback;
            this.mDefCallback.priority = priority;
            return this;
        }
        setNetCallback(callback, priority = 0) {
            this.mNetCallback.callback = callback;
            this.mNetCallback.priority = priority;
            return this;
        }
        setModeCallback(callback, priority = 0) {
            this.mModeCallback.callback = callback;
            this.mModeCallback.priority = priority;
            return this;
        }
        setSceneCallback(callback, priority = 0) {
            this.mSceneCallback.callback = callback;
            this.mSceneCallback.priority = priority;
            return this;
        }
        setUICallback(callback, priority = 0) {
            this.mUICallback.callback = callback;
            this.mSceneCallback.priority = priority;
            return this;
        }
        addListener(dis, type, callback = null, thisObj = null, _priority = 0, _dispatchOnce = false) {
            if (dis == YK.NetMgr.Instance)
                this.addNetEvent(type, callback, thisObj);
            else if (dis == YK.SceneMgr.Instance)
                this.addSceneEvent(type, callback, thisObj);
            else if (dis == YK.UIMgr.Instance)
                this.addUIEvent(type, callback, thisObj);
            else if (dis == YK.ModeMgr.Instance)
                this.addModeEvent(type, callback, thisObj);
            else {
                if (callback == null)
                    callback = this.mDefCallback.callback;
                if (thisObj == null)
                    thisObj = this.mDefCallback.thisObj;
                if (_priority == 0)
                    _priority = this.mDefCallback.priority;
                let x = this.otherEvents.findIndex((value, index, obj) => {
                    if (value.dis == dis && type == value.type
                        && callback != value.callback
                        && thisObj == value.thisObj) {
                        x = index;
                        return true;
                    }
                    else {
                        return false;
                    }
                });
                if (x != -1) {
                    let data = EventListenerData.CreateEventListenerData(dis, callback, this, type.toString(), _priority, _dispatchOnce);
                    data.AttachListener();
                    this.otherEvents.push(data);
                }
            }
        }
        removeListener(dis, type, callback = null, thisObj = null) {
            if (dis == YK.NetMgr.Instance)
                this.removeNetEvent(type, callback, thisObj);
            else if (dis == YK.SceneMgr.Instance)
                this.removeSceneEvent(type, callback, thisObj);
            else if (dis == YK.UIMgr.Instance)
                this.removeUIEvent(type, callback, thisObj);
            else if (dis == YK.ModeMgr.Instance)
                this.removeModeEvent(type, callback, thisObj);
            else {
                if (callback == null)
                    callback = this.mDefCallback.callback;
                if (thisObj == null)
                    thisObj = this.mDefCallback.callback;
                let x = this.otherEvents.findIndex((value, index, obj) => {
                    if (value.dis == dis && type == value.type
                        && callback != value.callback
                        && thisObj == value.thisObj) {
                        x = index;
                        return true;
                    }
                    else {
                        return false;
                    }
                });
                if (x != -1) {
                    this.otherEvents[x].DetachListener();
                    this.otherEvents.splice(x, 1);
                }
            }
        }
        addNetEvent(type, callback = null, thisObj = null, _priority = 0, _dispatchOnce = false) {
            if (callback == null) {
                callback = this.mNetCallback.callback;
                thisObj = this.mNetCallback.thisObj;
            }
            if (_priority == 0) {
                _priority = this.mNetCallback.priority;
            }
            this.networkEvnets.addListener(type, callback, thisObj, _priority, _dispatchOnce);
        }
        removeNetEvent(type, callback = null, thisObj = null) {
            if (callback == null) {
                callback = this.mNetCallback.callback;
                thisObj = this.mDefCallback.thisObj;
            }
            this.networkEvnets.removeListener(callback, thisObj, type);
        }
        addUIEvent(type, callback = null, thisObj = null, _priority = 0, _dispatchOnce = false) {
            if (callback == null) {
                callback = this.mUICallback.callback;
                thisObj = this.mUICallback.thisObj;
            }
            if (_priority == 0) {
                _priority = this.mUICallback.priority;
            }
            this.uiEvents.addListener(type, callback, thisObj, _priority, _dispatchOnce);
        }
        removeUIEvent(type, callback = null, thisObj = null) {
            if (callback == null) {
                callback = this.mUICallback.callback;
                thisObj = this.mUICallback.thisObj;
            }
            this.uiEvents.removeListener(callback, thisObj, type);
        }
        addSceneEvent(type, callback = null, thisObj = null, _priority = 0, _dispatchOnce = false) {
            if (callback == null) {
                callback = this.mSceneCallback.callback;
                thisObj = this.mSceneCallback.thisObj;
            }
            if (_priority == 0) {
                _priority = this.mUICallback.priority;
            }
            this.sceneEvents.addListener(type, callback, thisObj, _priority, _dispatchOnce);
        }
        removeSceneEvent(type, callback = null, thisObj = null) {
            if (callback == null) {
                callback = this.mSceneCallback.callback;
                thisObj = this.mSceneCallback.thisObj;
            }
            this.sceneEvents.removeListener(callback, thisObj, type);
        }
        addModeEvent(type, callback = null, thisObj = null, _priority = 0, _dispatchOnce = false) {
            if (callback == null) {
                callback = this.mModeCallback.callback;
                thisObj = this.mModeCallback.thisObj;
            }
            this.modeEvents.addListener(type, callback, thisObj);
        }
        removeModeEvent(type, callback = null, thisObj = null) {
            if (callback == null) {
                callback = this.mModeCallback.callback;
                thisObj = this.mModeCallback.thisObj;
            }
            this.modeEvents.removeListener(callback, thisObj, type);
        }
        RemoveAll() {
            if (this.networkEvnets != null)
                this.networkEvnets.removeAllListener();
            if (this.sceneEvents != null)
                this.sceneEvents.removeAllListener();
            if (this.uiEvents != null)
                this.uiEvents.removeAllListener();
            if (this.modeEvents != null)
                this.modeEvents.removeAllListener();
            this.otherEvents.forEach(element => {
                element.DetachListener();
            });
            this.otherEvents.splice(0, this.otherEvents.length);
        }
    }
    YK.InterchangeableEventListenerMgr = InterchangeableEventListenerMgr;
    class EventListenerData {
        constructor(dis, callback, thisObj, type, _priority = 0, _dispatchOnce = false) {
            this.dispatchOnce = false;
            this.dis = dis;
            this.thisObj = thisObj;
            this.type = type;
            this.callback = callback;
            this.priority = _priority;
            this.dispatchOnce = _dispatchOnce;
            // this.AttachListener()
        }
        static CreateEventListenerData(dis, callback, thisObj, type, _priority = 0, _dispatchOnce = false) {
            let listener = null;
            if (this.mEventListenerData.length > 0) {
                listener = this.mEventListenerData.pop();
                listener.dis = dis;
                listener.callback = callback;
                listener.thisObj = thisObj;
                listener.type = type;
                listener;
            }
            else {
                listener = new EventListenerData(dis, callback, thisObj, type, _priority, _dispatchOnce);
            }
            return listener;
        }
        static ReturnEventListenerData(listener) {
            if (listener) {
                listener.dis.removeEventListener(listener.type, listener.callback, listener.thisObj);
                listener.dis = null;
                listener.callback = null;
                listener.thisObj = null;
                listener.type = null;
                this.mEventListenerData.push(listener);
            }
        }
        AttachListener() {
            if (this.dis.hasEventListener(this.type, this.callback, this.thisObj)) {
                this.DetachListener();
                return false;
            }
            this.dis.addEventListener(this.type, this.callback, this.thisObj, this.priority, this.dispatchOnce);
            return true;
        }
        DetachListener() {
            EventListenerData.ReturnEventListenerData(this);
        }
    }
    EventListenerData.mEventListenerData = new Array();
    YK.EventListenerData = EventListenerData;
})(YK || (YK = {}));
},{}],5:[function(require,module,exports){
var YK;
(function (YK) {
    class NetMgr extends YK.DispatchEventNode {
        /**
         *
         */
        constructor() {
            super();
            this.httpUrl = "http://39.107.84.87:9100/?";
            this.mTimeout = 10; //默认十秒
            this.mHeartTimeout = 10;
            this.ip = 'ws://39.107.84.87:9023';
            this.socket = null;
            this.mMsgId = 0;
            this.mSendQueue = new Array();
            if (NetMgr.mInstance == null)
                NetMgr.mInstance = this;
            YK.TimeDelay.Instance.Add(1, 0, this.CheckSendTimeOut, this);
            this.socket = new Laya.Socket(null, null, Laya.Byte);
            this.socket.on(Laya.Event.OPEN, this, this.onopen);
            this.socket.on(Laya.Event.CLOSE, this, this.onclose);
            this.socket.on(Laya.Event.MESSAGE, this, this.onmessage);
            this.socket.on(Laya.Event.ERROR, this, this.onerror);
        }
        static get Instance() {
            if (this.mInstance == null)
                new NetMgr();
            return this.mInstance;
        }
        onDestroy() {
            YK.TimeDelay.Instance.Remove(this.CheckSendTimeOut, this);
        }
        CheckSendTimeOut() {
            if (this.mSendQueue.length > 0) {
                let array = new Array();
                this.mSendQueue.forEach(element => {
                    if (Date.now() - element.sendTime > this.mTimeout * 1000) {
                        array.push(element);
                    }
                });
                array.forEach(element => {
                    let index = this.mSendQueue.indexOf(element);
                    if (index != -1) {
                        this.mSendQueue.splice(index, 1);
                    }
                    this.msgTimeOut(element.head);
                });
            }
        }
        AddProto(pbName, protoNames) {
            let roots = protobuf.roots["default"][pbName];
            for (let key in protoNames) {
                let protoName = protoNames[key];
                let _class = roots[protoName];
                YK.ProtoMap.Add(protoName, _class);
            }
        }
        connect(wsurl = null) {
            wsurl = wsurl == null ? this.ip : wsurl;
            if (this.socket.connected) {
                this.onopen(null);
            }
            else {
                this.socket.connectByUrl(wsurl);
            }
        }
        onopen(ev) {
            console.log("链接服务器成功");
            YK.TimeDelay.Instance.Remove(this.sendHeartbeat, this);
            YK.TimeDelay.Instance.Remove(this.checkHeartbeat, this);
            YK.TimeDelay.Instance.Add(3, 0, this.sendHeartbeat, this);
            YK.TimeDelay.Instance.Add(3, 0, this.checkHeartbeat, this);
            this.lastActivityTime = Date.now();
            this.DispatchEventByType(NetMgrEventDef.onopen);
        }
        isConnect() {
            return this.socket != null && this.socket.connected;
        }
        disConnect(msgType, msg) {
            if (this.mSendQueue) {
                this.mSendQueue.splice(0, this.mSendQueue.length);
            }
            if (this.isConnect()) {
                this.socket.close();
                this.socket.cleanSocket();
            }
            YK.TimeDelay.Instance.Remove(this.sendHeartbeat, this);
            YK.TimeDelay.Instance.Remove(this.checkHeartbeat, this);
            let data = { type: msgType, msg: msg };
            this.DispatchEventByType(NetMgrEventDef.disConnect, data);
        }
        onerror(ev) {
            console.log("与服务器连接失败");
            this.disConnect(NetMgrEventDef.onerror, "与服务器连接失败");
        }
        onclose(ev) {
            console.log("与服务器连接断开");
            this.disConnect(NetMgrEventDef.onclose, "与服务器连接断开");
        }
        onmessage(data) {
            let head;
            //try 
            {
                head = YK.ProtoMap.UnPackHead(data);
                if (head != null) {
                    this.lastActivityTime = Date.now();
                    if (head.cmd != 1) {
                        this.distributeMsg(head);
                    }
                    else {
                        //console.log("收到心跳包")
                    }
                }
                else {
                    console.error("协议解析失败");
                }
            } //catch (error) 
            // {
            //     console.error("协议解析失败")
            //     this.disConnect("onerror","解析消息失败")
            // }
        }
        get Msgid() {
            return this.mMsgId++;
        }
        sendHeartbeat() {
            if (this.isConnect()) {
                //console.log("发送一次心跳" + Date.now())
                this.Send(1);
            }
        }
        checkHeartbeat() {
            if (Date.now() - this.lastActivityTime > 10 * 1000) {
                this.disConnect(NetMgrEventDef.HeartbeatTimeOut, "与服务器连接超时");
            }
        }
        msgTimeOut(head) {
            if (head.cmd == 1) {
                this.disConnect(NetMgrEventDef.HeartbeatTimeOut, "与服务器连接超时");
            }
            else {
                let ev = new YK.ResponseMessageEvent(head.cmd.toString());
                head.errorcode = -1;
                ev.SetData(head, null);
                console.error("消息返回超时id=" + head.cmd);
                this.DispatchEvent(ev);
            }
        }
        SendGet(url, callback) {
            url = this.httpUrl + url;
            console.log(url);
            let flag = false;
            let request = new laya.net.HttpRequest();
            request.once(laya.events.Event.COMPLETE, this, (e) => {
                let respone = request.data;
                let data = null;
                if (respone != null) {
                    data = JSON.parse(respone);
                }
                callback.Invoke(data);
            });
            request.once(laya.events.Event.ERROR, this, (e) => {
                callback.Invoke(null);
            });
            request.send(url, null, "get");
        }
        Send(id, data = null) {
            let head = new YK.PackBase();
            head.cmd = id;
            head.errorcode = 0;
            head.msgid = this.Msgid;
            let sendData = {
                head: head,
                sendTime: Date.now()
            };
            if (this.isConnect()) {
                let buffer = YK.ProtoMap.Pack(head, data);
                if (id != 1) {
                    console.log("发送消息给服务器》");
                    console.log(head);
                    console.log(data);
                    this.mSendQueue.push(sendData);
                }
                this.socket.send(buffer);
            }
            else {
                console.error("网络断开无法发送消息");
            }
        }
        distributeMsg(head) {
            let msg = YK.ProtoMap.UnPack(head);
            console.log("收到服务返回的消息信息头：");
            console.log(head);
            if (head.errorcode != null && head.errorcode != 0) {
                console.warn("服务器返回错误码  消息id：" + head.cmd + "/errorcode=" + head.errorcode);
            }
            if (head == null || head.cmd == null) {
                console.warn("服务器返回无效的cmdid");
            }
            else {
                let index = this.mSendQueue.findIndex((obj, index, any) => {
                    return obj.head.msgid == head.msgid && obj.head.cmd == head.cmd;
                });
                if (index != -1) {
                    this.mSendQueue.splice(index, 1);
                }
                let ev = new YK.ResponseMessageEvent(head.cmd.toString());
                ev.SetData(head, msg);
                this.DispatchEvent(ev);
            }
        }
    }
    YK.NetMgr = NetMgr;
    class NetMgrEventDef {
    }
    NetMgrEventDef.disConnect = "disConnect";
    NetMgrEventDef.onerror = "onerror";
    NetMgrEventDef.onclose = "onclose";
    NetMgrEventDef.onopen = "onopen";
    NetMgrEventDef.HeartbeatTimeOut = "HeartbeatTimeOut";
    YK.NetMgrEventDef = NetMgrEventDef;
})(YK || (YK = {}));
},{}],6:[function(require,module,exports){
var YK;
(function (YK) {
    var Handler = Laya.Handler;
    class ResInfo {
        constructor() {
            this.isKeepMemory = false;
            this.isFGUIPack = false;
        }
        get fullUrl() {
            if (this.isFGUIPack) {
                return this.url.replace("." + fairygui.UIConfig.packageFileExtension, "");
            }
            return this.url;
        }
    }
    class LoadGruopInfo {
        constructor() {
            this.Progress = 0;
            this.needLoad = new Array();
        }
        add(url, type, isKeepMemory = false, isFGUIPack = false) {
            let index = this.needLoad.findIndex((value, index, obj) => {
                return value.url == url;
            });
            if (index == -1) {
                let info = new ResInfo();
                info.isKeepMemory = isKeepMemory;
                info.url = url;
                info.type = type;
                info.isFGUIPack = isFGUIPack;
                this.needLoad.push(info);
            }
            return this;
        }
        onCompletion(callback, thisObjs) {
            this.finish = new YK.Func(thisObjs, callback);
            return this;
        }
        onItemCompletion(callback, thisObjs) {
            this.loadItem = new YK.Func(thisObjs, callback);
            return this;
        }
        start() {
            ResMgr.Instance.LoadGroup(this);
        }
    }
    YK.LoadGruopInfo = LoadGruopInfo;
    class ResMgr extends YK.DispatchEventNode {
        constructor() {
            super();
            this.mOldRes = new Array();
            this.resDic = new Map();
            if (ResMgr.mInstance == null)
                ResMgr.mInstance = this;
        }
        static get Instance() {
            if (this.mInstance == null)
                new ResMgr();
            return this.mInstance;
        }
        GetRes(url) {
            return Laya.loader.getRes(url);
        }
        LoadGroup(loads) {
            let urls = new Array();
            loads.needLoad.forEach(element => {
                urls.push({ url: element.url, type: element.type });
            });
            Laya.loader.load(urls, Handler.create(this, (success) => {
                if (success) {
                    for (let index = 0; index < loads.needLoad.length; index++) {
                        let info = loads.needLoad[index];
                        if (info.isFGUIPack) {
                            fairygui.UIPackage.addPackage(info.fullUrl);
                        }
                        if (!this.resDic.has(info.url)) {
                            this.resDic.set(info.url, info);
                        }
                    }
                    if (loads.finish != null) {
                        loads.finish.Invoke();
                    }
                }
                else {
                    console.error("加载资源失败：");
                    console.log(urls);
                }
            }), Handler.create(this, (progress) => {
                loads.Progress = progress * 100;
                if (loads.loadItem != null) {
                    loads.loadItem.Invoke();
                }
            }));
        }
        /**
         * 释放资源
         * @param forced 是否强制释放所有
         */
        pop(forced = false) {
            if (forced) {
                this.mOldRes.splice(0, this.mOldRes.length);
                this.resDic.forEach((v, key) => {
                    this.mOldRes.push(key);
                });
            }
            while (this.mOldRes.length > 0) {
                let url = this.mOldRes.pop();
                let info = this.resDic.get(url);
                if (info != null) {
                    if (info.isFGUIPack)
                        fairygui.UIPackage.removePackage(info.fullUrl);
                    this.resDic.delete(info.url);
                }
                Laya.loader.clearRes(url);
            }
            if (forced) {
                this.resDic.clear();
            }
            else {
            }
        }
        /**
         * 压入要释放的资源
         */
        push() {
            this.resDic.forEach((v, key) => {
                if (!v.isKeepMemory)
                    this.mOldRes.push(key);
            });
        }
    }
    ResMgr.mInstance = null;
    YK.ResMgr = ResMgr;
})(YK || (YK = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
